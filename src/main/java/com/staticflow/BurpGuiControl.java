package com.staticflow;

import javax.swing.*;
import java.awt.*;
import java.security.KeyStore;

/*
This stores our state for the extension as a Singleton
 */
class BurpGuiControl {


    public static void printChildrenComponents(Container component, int level, int maxDepth) {
        StringBuilder tabs = new StringBuilder();
        for(int i=0;i<level;i++){
            tabs.append("\t");
        }
        int count = 0;
        for (Component child : component.getComponents()){
            System.out.println(tabs.toString()+" "+level+"."+count+"|->"+child);
            count++;
            if (child instanceof Container && level != maxDepth) {

                printChildrenComponents((Container) child,level+1, maxDepth);
            }
        }
    }

    public static void printChildrenComponentsInputMaps(Container component, int level, int maxDepth) {
        StringBuilder tabs = new StringBuilder();
        for(int i=0;i<level;i++){
            tabs.append("\t");
        }
        try {
            if (((JComponent) component).getInputMap() != null && ((JComponent) component).getInputMap().allKeys() != null) {
                for (KeyStroke k : ((JComponent) component).getInputMap().allKeys()) {
                    if(k.toString().startsWith("shift ctrl pressed") || k.toString().startsWith("ctrl shift pressed")) {
                        System.out.println(tabs.toString() + " " + component);
                        System.out.println(tabs.toString() + " " + k + " " + ((JComponent) component).getInputMap().get(k));
                    }
                }
            }
        } catch (Exception ignored) {

        }
        for (Component child : component.getComponents()) {
            if (child instanceof Container && level != maxDepth) {

                printChildrenComponentsInputMaps((Container) child, level + 1, maxDepth);
            }
        }
    }

    public static Container getRootPane(){
        for(Frame frame : Frame.getFrames()) {
            if(frame.isVisible() && frame.getTitle().startsWith(("Burp Suite")))
            {
                Container rootpane = (Container) frame.getComponent(0);
                Container layeredPane = (Container) rootpane.getComponent(1);
                Container jpanel = (Container) layeredPane.getComponent(0);
                return (Container) jpanel.getComponent(0);
            }
        }
        return null;
        //return ExtensionState.getInstance().getLibraryPanelTab().getMainBurpPane();
    }


    public static Component getCurrentlySelectedRepeaterTab() {
        Container repeaterTabContainer = (Container) getBaseBurpComponent("Repeater");
        return ((JTabbedPane)repeaterTabContainer).getSelectedComponent();
    }

    public static Component[] getAllRepeaterTabs() {
        Container repeaterTabContainer = (Container) getBaseBurpComponent("Repeater");
        return ((JTabbedPane)repeaterTabContainer).getComponents();
    }

    /**
     * Retrieves the Proxy HTTP History Tab
     * @return The Proxy HTTP History Tab
     */
    public static Component getProxyHTTPHistoryComponent() {
        Container proxyTabContainer = (Container) getBaseBurpComponent("Proxy");
        JTabbedPane tabber = (JTabbedPane) proxyTabContainer;
        return tabber.getComponentAt(tabber.indexOfTab("HTTP history"));
    }

    /**
     * Retrieves the Proxy Intercept Tab
     * @return The Proxy Intercept Tab
     */
    public static Component getProxyInterceptComponent() {
        Container proxyTabContainer = (Container) getBaseBurpComponent("Proxy");
        return proxyTabContainer.getComponents()[1];
    }

    /**
     * Retrieves the Proxy Websocket History Tab
     * @return The Proxy Websocket History Tab
     */
    public static Component getProxyWebsocketHistoryComponent() {
        Container proxyTabContainer = (Container) getBaseBurpComponent("Proxy");
        return proxyTabContainer.getComponents()[3];
    }

    /**
     * Retrieves the Tab component from BurpSuite denoted by the tab name. For instance if you wanted to Repeater tab
     * it would be getBaseBurpComponent("Repeater"). This also works for custom tabs generated by extensions.
     * @return The Burp UI tab denoted by the tab name
     */
    public static Component getBaseBurpComponent(String tabName) {
        JTabbedPane mainTabs =  ((JTabbedPane) getRootPane());
        //mainTabs.setSelectedIndex(mainTabs.indexOfTab(tabName));
        //printChildrenComponents((Container)httpHistoryTab,0);
        //return mainTabs.getSelectedComponent();
        return mainTabs.getComponentAt(mainTabs.indexOfTab(tabName));

    }

    public static void addBaseBurpComponent(String tabName, Component newComponent) {
        JTabbedPane mainTabs =  ((JTabbedPane) getRootPane());
        mainTabs.addTab(tabName,newComponent);
    }

    public static void replaceBaseBurpComponent(String tabName, Component newComponent) {
        JTabbedPane mainTabs =  ((JTabbedPane) getRootPane());
        mainTabs.setComponentAt(mainTabs.indexOfTab(tabName),newComponent);
    }



}